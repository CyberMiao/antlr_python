# Generated from E:/work/compile/antlr-python/MIDL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,443,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,
        1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,4,38,296,8,38,
        11,38,12,38,297,1,38,1,38,1,39,3,39,303,8,39,1,40,1,40,1,41,1,41,
        1,42,1,42,1,43,1,43,1,43,5,43,314,8,43,10,43,12,43,317,9,43,3,43,
        319,8,43,1,43,3,43,322,8,43,1,44,1,44,3,44,326,8,44,1,44,4,44,329,
        8,44,11,44,12,44,330,1,45,1,45,1,46,4,46,336,8,46,11,46,12,46,337,
        1,46,1,46,5,46,342,8,46,10,46,12,46,345,9,46,1,46,3,46,348,8,46,
        1,46,3,46,351,8,46,1,46,1,46,4,46,355,8,46,11,46,12,46,356,1,46,
        3,46,360,8,46,1,46,3,46,363,8,46,1,46,4,46,366,8,46,11,46,12,46,
        367,1,46,1,46,3,46,372,8,46,1,46,4,46,375,8,46,11,46,12,46,376,1,
        46,3,46,380,8,46,1,46,3,46,383,8,46,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,3,48,392,8,48,3,48,394,8,48,1,48,1,48,1,49,1,49,1,49,1,49,3,
        49,402,8,49,5,49,404,8,49,10,49,12,49,407,9,49,1,49,1,49,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,429,8,50,1,51,1,51,3,51,433,8,51,1,51,1,51,
        3,51,437,8,51,5,51,439,8,51,10,51,12,51,442,9,51,0,0,52,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,75,38,77,39,79,0,81,0,83,0,85,0,87,40,89,0,91,0,93,41,95,0,97,
        42,99,43,101,44,103,45,1,0,12,3,0,9,10,12,13,32,32,2,0,65,90,97,
        122,1,0,48,57,2,0,76,76,108,108,1,0,49,57,2,0,69,69,101,101,2,0,
        43,43,45,45,4,0,68,68,70,70,100,100,102,102,8,0,34,34,39,39,92,92,
        98,98,102,102,110,110,114,114,116,116,1,0,92,92,1,0,39,39,1,0,34,
        34,466,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,87,1,0,0,
        0,0,93,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,
        0,0,1,105,1,0,0,0,3,107,1,0,0,0,5,115,1,0,0,0,7,117,1,0,0,0,9,119,
        1,0,0,0,11,127,1,0,0,0,13,130,1,0,0,0,15,136,1,0,0,0,17,144,1,0,
        0,0,19,153,1,0,0,0,21,160,1,0,0,0,23,168,1,0,0,0,25,181,1,0,0,0,
        27,188,1,0,0,0,29,195,1,0,0,0,31,201,1,0,0,0,33,208,1,0,0,0,35,215,
        1,0,0,0,37,221,1,0,0,0,39,231,1,0,0,0,41,239,1,0,0,0,43,247,1,0,
        0,0,45,255,1,0,0,0,47,262,1,0,0,0,49,264,1,0,0,0,51,266,1,0,0,0,
        53,268,1,0,0,0,55,270,1,0,0,0,57,272,1,0,0,0,59,274,1,0,0,0,61,276,
        1,0,0,0,63,279,1,0,0,0,65,282,1,0,0,0,67,284,1,0,0,0,69,286,1,0,
        0,0,71,288,1,0,0,0,73,290,1,0,0,0,75,292,1,0,0,0,77,295,1,0,0,0,
        79,302,1,0,0,0,81,304,1,0,0,0,83,306,1,0,0,0,85,308,1,0,0,0,87,318,
        1,0,0,0,89,323,1,0,0,0,91,332,1,0,0,0,93,382,1,0,0,0,95,384,1,0,
        0,0,97,387,1,0,0,0,99,397,1,0,0,0,101,428,1,0,0,0,103,430,1,0,0,
        0,105,106,5,59,0,0,106,2,1,0,0,0,107,108,5,109,0,0,108,109,5,111,
        0,0,109,110,5,100,0,0,110,111,5,117,0,0,111,112,5,108,0,0,112,113,
        5,101,0,0,113,114,5,32,0,0,114,4,1,0,0,0,115,116,5,123,0,0,116,6,
        1,0,0,0,117,118,5,125,0,0,118,8,1,0,0,0,119,120,5,115,0,0,120,121,
        5,116,0,0,121,122,5,114,0,0,122,123,5,117,0,0,123,124,5,99,0,0,124,
        125,5,116,0,0,125,126,5,32,0,0,126,10,1,0,0,0,127,128,5,58,0,0,128,
        129,5,58,0,0,129,12,1,0,0,0,130,131,5,99,0,0,131,132,5,104,0,0,132,
        133,5,97,0,0,133,134,5,114,0,0,134,135,5,32,0,0,135,14,1,0,0,0,136,
        137,5,115,0,0,137,138,5,116,0,0,138,139,5,114,0,0,139,140,5,105,
        0,0,140,141,5,110,0,0,141,142,5,103,0,0,142,143,5,32,0,0,143,16,
        1,0,0,0,144,145,5,98,0,0,145,146,5,111,0,0,146,147,5,111,0,0,147,
        148,5,108,0,0,148,149,5,101,0,0,149,150,5,97,0,0,150,151,5,110,0,
        0,151,152,5,32,0,0,152,18,1,0,0,0,153,154,5,102,0,0,154,155,5,108,
        0,0,155,156,5,111,0,0,156,157,5,97,0,0,157,158,5,116,0,0,158,159,
        5,32,0,0,159,20,1,0,0,0,160,161,5,100,0,0,161,162,5,111,0,0,162,
        163,5,117,0,0,163,164,5,98,0,0,164,165,5,108,0,0,165,166,5,101,0,
        0,166,167,5,32,0,0,167,22,1,0,0,0,168,169,5,108,0,0,169,170,5,111,
        0,0,170,171,5,110,0,0,171,172,5,103,0,0,172,173,5,32,0,0,173,174,
        5,100,0,0,174,175,5,111,0,0,175,176,5,117,0,0,176,177,5,98,0,0,177,
        178,5,108,0,0,178,179,5,101,0,0,179,180,5,32,0,0,180,24,1,0,0,0,
        181,182,5,115,0,0,182,183,5,104,0,0,183,184,5,111,0,0,184,185,5,
        114,0,0,185,186,5,116,0,0,186,187,5,32,0,0,187,26,1,0,0,0,188,189,
        5,105,0,0,189,190,5,110,0,0,190,191,5,116,0,0,191,192,5,49,0,0,192,
        193,5,54,0,0,193,194,5,32,0,0,194,28,1,0,0,0,195,196,5,108,0,0,196,
        197,5,111,0,0,197,198,5,110,0,0,198,199,5,103,0,0,199,200,5,32,0,
        0,200,30,1,0,0,0,201,202,5,105,0,0,202,203,5,110,0,0,203,204,5,116,
        0,0,204,205,5,51,0,0,205,206,5,50,0,0,206,207,5,32,0,0,207,32,1,
        0,0,0,208,209,5,105,0,0,209,210,5,110,0,0,210,211,5,116,0,0,211,
        212,5,54,0,0,212,213,5,52,0,0,213,214,5,32,0,0,214,34,1,0,0,0,215,
        216,5,105,0,0,216,217,5,110,0,0,217,218,5,116,0,0,218,219,5,56,0,
        0,219,220,5,32,0,0,220,36,1,0,0,0,221,222,5,117,0,0,222,223,5,110,
        0,0,223,224,5,115,0,0,224,225,5,105,0,0,225,226,5,103,0,0,226,227,
        5,110,0,0,227,228,5,101,0,0,228,229,5,100,0,0,229,230,5,32,0,0,230,
        38,1,0,0,0,231,232,5,117,0,0,232,233,5,105,0,0,233,234,5,110,0,0,
        234,235,5,116,0,0,235,236,5,49,0,0,236,237,5,54,0,0,237,238,5,32,
        0,0,238,40,1,0,0,0,239,240,5,117,0,0,240,241,5,105,0,0,241,242,5,
        110,0,0,242,243,5,116,0,0,243,244,5,51,0,0,244,245,5,50,0,0,245,
        246,5,32,0,0,246,42,1,0,0,0,247,248,5,117,0,0,248,249,5,105,0,0,
        249,250,5,110,0,0,250,251,5,116,0,0,251,252,5,54,0,0,252,253,5,52,
        0,0,253,254,5,32,0,0,254,44,1,0,0,0,255,256,5,117,0,0,256,257,5,
        105,0,0,257,258,5,110,0,0,258,259,5,116,0,0,259,260,5,56,0,0,260,
        261,5,32,0,0,261,46,1,0,0,0,262,263,5,44,0,0,263,48,1,0,0,0,264,
        265,5,61,0,0,265,50,1,0,0,0,266,267,5,91,0,0,267,52,1,0,0,0,268,
        269,5,93,0,0,269,54,1,0,0,0,270,271,5,124,0,0,271,56,1,0,0,0,272,
        273,5,94,0,0,273,58,1,0,0,0,274,275,5,38,0,0,275,60,1,0,0,0,276,
        277,5,62,0,0,277,278,5,62,0,0,278,62,1,0,0,0,279,280,5,60,0,0,280,
        281,5,60,0,0,281,64,1,0,0,0,282,283,5,43,0,0,283,66,1,0,0,0,284,
        285,5,45,0,0,285,68,1,0,0,0,286,287,5,42,0,0,287,70,1,0,0,0,288,
        289,5,47,0,0,289,72,1,0,0,0,290,291,5,37,0,0,291,74,1,0,0,0,292,
        293,5,126,0,0,293,76,1,0,0,0,294,296,7,0,0,0,295,294,1,0,0,0,296,
        297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,
        300,6,38,0,0,300,78,1,0,0,0,301,303,7,1,0,0,302,301,1,0,0,0,303,
        80,1,0,0,0,304,305,7,2,0,0,305,82,1,0,0,0,306,307,5,95,0,0,307,84,
        1,0,0,0,308,309,7,3,0,0,309,86,1,0,0,0,310,319,5,48,0,0,311,315,
        7,4,0,0,312,314,7,2,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,313,
        1,0,0,0,315,316,1,0,0,0,316,319,1,0,0,0,317,315,1,0,0,0,318,310,
        1,0,0,0,318,311,1,0,0,0,319,321,1,0,0,0,320,322,3,85,42,0,321,320,
        1,0,0,0,321,322,1,0,0,0,322,88,1,0,0,0,323,325,7,5,0,0,324,326,7,
        6,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,328,1,0,0,0,327,329,7,
        2,0,0,328,327,1,0,0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,
        0,0,0,331,90,1,0,0,0,332,333,7,7,0,0,333,92,1,0,0,0,334,336,7,2,
        0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,1,0,
        0,0,338,339,1,0,0,0,339,343,5,46,0,0,340,342,7,2,0,0,341,340,1,0,
        0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,347,1,0,
        0,0,345,343,1,0,0,0,346,348,3,89,44,0,347,346,1,0,0,0,347,348,1,
        0,0,0,348,350,1,0,0,0,349,351,3,91,45,0,350,349,1,0,0,0,350,351,
        1,0,0,0,351,383,1,0,0,0,352,354,5,46,0,0,353,355,7,2,0,0,354,353,
        1,0,0,0,355,356,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,
        1,0,0,0,358,360,3,89,44,0,359,358,1,0,0,0,359,360,1,0,0,0,360,362,
        1,0,0,0,361,363,3,91,45,0,362,361,1,0,0,0,362,363,1,0,0,0,363,383,
        1,0,0,0,364,366,7,2,0,0,365,364,1,0,0,0,366,367,1,0,0,0,367,365,
        1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,371,3,89,44,0,370,372,
        3,91,45,0,371,370,1,0,0,0,371,372,1,0,0,0,372,383,1,0,0,0,373,375,
        7,2,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,374,1,0,0,0,376,377,
        1,0,0,0,377,379,1,0,0,0,378,380,3,89,44,0,379,378,1,0,0,0,379,380,
        1,0,0,0,380,381,1,0,0,0,381,383,3,91,45,0,382,335,1,0,0,0,382,352,
        1,0,0,0,382,365,1,0,0,0,382,374,1,0,0,0,383,94,1,0,0,0,384,385,5,
        92,0,0,385,386,7,8,0,0,386,96,1,0,0,0,387,393,5,39,0,0,388,394,3,
        95,47,0,389,392,8,9,0,0,390,392,8,10,0,0,391,389,1,0,0,0,391,390,
        1,0,0,0,392,394,1,0,0,0,393,388,1,0,0,0,393,391,1,0,0,0,394,395,
        1,0,0,0,395,396,5,39,0,0,396,98,1,0,0,0,397,405,5,34,0,0,398,404,
        3,95,47,0,399,402,8,9,0,0,400,402,8,11,0,0,401,399,1,0,0,0,401,400,
        1,0,0,0,402,404,1,0,0,0,403,398,1,0,0,0,403,401,1,0,0,0,404,407,
        1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,405,
        1,0,0,0,408,409,5,34,0,0,409,100,1,0,0,0,410,411,5,116,0,0,411,412,
        5,114,0,0,412,413,5,117,0,0,413,429,5,101,0,0,414,415,5,102,0,0,
        415,416,5,97,0,0,416,417,5,108,0,0,417,418,5,115,0,0,418,429,5,101,
        0,0,419,420,5,84,0,0,420,421,5,82,0,0,421,422,5,85,0,0,422,429,5,
        69,0,0,423,424,5,70,0,0,424,425,5,65,0,0,425,426,5,76,0,0,426,427,
        5,83,0,0,427,429,5,69,0,0,428,410,1,0,0,0,428,414,1,0,0,0,428,419,
        1,0,0,0,428,423,1,0,0,0,429,102,1,0,0,0,430,440,3,79,39,0,431,433,
        3,83,41,0,432,431,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,0,434,437,
        3,79,39,0,435,437,3,81,40,0,436,434,1,0,0,0,436,435,1,0,0,0,437,
        439,1,0,0,0,438,432,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,
        441,1,0,0,0,441,104,1,0,0,0,442,440,1,0,0,0,29,0,297,302,315,318,
        321,325,330,337,343,347,350,356,359,362,367,371,376,379,382,391,
        393,401,403,405,428,432,436,440,1,6,0,0
    ]

class MIDLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    WS = 39
    INTEGER = 40
    FLOATING_PT = 41
    CHAR = 42
    STRING = 43
    BOOLEAN = 44
    ID = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'module '", "'{'", "'}'", "'struct '", "'::'", "'char '", 
            "'string '", "'boolean '", "'float '", "'double '", "'long double '", 
            "'short '", "'int16 '", "'long '", "'int32 '", "'int64 '", "'int8 '", 
            "'unsigned '", "'uint16 '", "'uint32 '", "'uint64 '", "'uint8 '", 
            "','", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'>>'", "'<<'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "INTEGER", "FLOATING_PT", "CHAR", "STRING", "BOOLEAN", 
            "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "WS", "LETTER", "DIGIT", "UNDERLINE", "INTEGER_TYPE_SUFFIX", 
                  "INTEGER", "EXPONENT", "FLOAT_TYPE_SUFFIX", "FLOATING_PT", 
                  "ESCAPE_SEQUENCE", "CHAR", "STRING", "BOOLEAN", "ID" ]

    grammarFileName = "MIDL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


